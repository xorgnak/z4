<!DOCTYPE html>
<html>
<head>
<script
  src="https://code.jquery.com/jquery-3.7.0.min.js"
  integrity="sha256-2Pmvv0kuTBOenSvLm6bvfBSSHrUJ+3A7x6P5Ebd07/g="
  crossorigin="anonymous"></script>

<link href="https://fonts.googleapis.com/icon?family=Material+Icons"
      rel="stylesheet">

<script src="https://cdnjs.cloudflare.com/ajax/libs/paho-mqtt/1.1.0/paho-mqtt.min.js"
	integrity="sha512-Y5n0fbohPllOQ21fTwM/h9sQQ/1a1h5KhweGhu2zwD8lAoJnTgVa7NIrFa1bRDIMQHixtyuRV2ubIx+qWbGdDA=="
	crossorigin="anonymous"
	referrerpolicy="no-referrer"></script>

<script src="https://cdn.jsdelivr.net/npm/jquery.qrcode@1.0.3/jquery.qrcode.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jsqr@1.4.0/dist/jsQR.min.js"></script>

<meta name="viewport" content="width=device-width, initial-scale=1" />

<% if params.has_key?(:user) && params.has_key?(:chan) %>
<% @user = Z4.make(params[:user], :user) %>
<% @chan = Z4.make(params[:chan], :chan) %>
<link rel="manifest" href="/manifest.webmanifest?user=<%= params[:user] %>&chan=<%= params[:chan] %>&route=<%= request.path.gsub('/','') %>" />
<% end %>

<style>

.material-icons { vertical-align: middle; }

html { font-family: monospace; background-color: black; color: white; font-size: xx-small; }

body { padding: 0; margin: 0; width: 100%; height: 100%; }

#form { padding: 0; margin: 0; width: 100%; height: 100%; }

.out { background-color: black; color: grey; border: thin solid grey; }

.in { background-color: black; color: white; border: thin solid green; }

.post { background-color: black; color: grey; border: thin solid gold; }

.error { background-color: black; color: red; border: thin solid red; }

.msg { background-color: black; color: blue; border: thin solid blue; }

.info { background-color: black; color: green; border: thin solid red; }

.wall { background-color: black; color: gold; border: thin solid grey; }

.menu { text-decoration: none; border: thin outset white; border-radius: 5px; padding: 0 1% 0 1%; color: white; }

.e { width: 100%; text-align: center; }

</style>

<script>

var params = <%= JSON.generate(params) %>;

function setupIds(length) {
    let result = '';
    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    const charactersLength = characters.length;
    let counter = 0;
    while (counter < length) {
	result += characters.charAt(Math.floor(Math.random() * charactersLength));
	counter += 1;
    }
    return result;
}

const id = setupIds(8);

const client = new Paho.Client('propedicab.com', 8883, 'c' + id);

function emit(t, p) {
    message = new Paho.Message(p);
    message.destinationName = t;
    client.send(message);
}

function display(t, p) {
    $('#output').prepend('<div class="' + t + '" style="padding: 0;">' + p + '</code></div>');
}

function output(i) {
    $('#output').prepend('<p style="margin: 0; padding: 0;">' + i + '</p>');
}

function print(i) {
    output(i);
    console.log(i)
}

client.onConnectionLost = onConnectionLost;
client.onMessageArrived = onMessageArrived;

// connect the client
function connect() {
client.connect({ onSuccess: onConnect , useSSL: true, userName: 'u' + id, password: 'p' + id });
}

function onConnect() {
    client.subscribe(params.net);
    client.subscribe(params.net + '/#');
//    client.subscribe('#');
    emit(params.net, 'CLIENT ' + id);
}

function onConnectionLost(responseObject) {
    if (responseObject.errorCode !== 0) {
	display('error', responseObject.errorMessage);
    }
    connect();
}

function onMessageArrived(message) {
    console.log("[msg] ", message.destinationName, message.payloadString);
    var topic = message.destinationName;
    var t;
    if (topic == params.net + '/') {
      t = 'out';
    } else if (topic == params.net) {
      t = 'in'
    } else {
      t = 'msg'
    }
    display(t, message.payloadString);
}

<% if ENV['BROKER'] != 'localhost' && ENV['BROKER'] != nil %>
connect();
<% end %>

function send() {
    h = { input: $('#input').val(), chan: params.chan, user: params.user, net: params.net, id: params.id };
    $('#input').val('');
    console.log("[send]", h);
    $.post('/', h, function(data) {
	console.log('[recv]', data);
	if (data.output !== '' ) {
	    display(data.type, '<code>' + data.output + '</code>');
	}
    });
}

$(document).on('click', '.a', function(ev) {
    ev.preventDefault();
    var v = $('#input').val();
    $('#input').val(v + $(this).val());
});

$(document).on('click', '.send', function(ev) {
    ev.preventDefault();
    $('#input').val($(this).val());
    $('#send').click();
});

$(document).on('submit', '#form', function(ev) {
    ev.preventDefault();
    $('#send').click();
});

$(document).on('click', '#send', function(ev) {
    ev.preventDefault();
    send();
});

$(document).on('change', '#input_method', function(ev) {
    $('.inputs').hide();
    $('#' + $('#input_method').val()).show();
});

<% if params.has_key?(:user) && params.has_key?(:chan) %>

var watchID;

if (!navigator.geolocation) {
    $('#grid').append('(grid unavailable)');
} else {
    function gps_success(p) {
      	$.post('/', { lat: p.coords.latitude, lon: p.coords.longitude, user: params.user, chan: params.chan }, function(data){
	    j = JSON.parse(data);
	    //$('#items').html('<p>' + p.coords.latitude + ', ' + p.coords.longitude + '</p>');
            $('#grid').text(j['grid']);
	});
}
function gps_error() {  $('#items').html('<p>[GPS] something went wrong.</p>'); }
const gps_options = { enableHighAccuracy: true, maximumAge: 15000, timeout: 30000 };
watchID = navigator.geolocation.watchPosition(gps_success, gps_error, gps_options);
}

  if ('serviceWorker' in navigator) {
      navigator.serviceWorker.register('service-worker.js?user=<%= params[:user] %>&chan=<%= params[:chan] %>');
      Notification.requestPermission().then((result) => {
	  if (result === "granted") {
	      actions = []
	      navigator.serviceWorker.ready.then((registration) => {
		  registration.showNotification("<%= request.host %> running.", {
		      body: "Click to see what's out there.",
		      icon: "../images/touch/chrome-touch-icon-192x192.png",
		      vibrate: [200, 100, 200, 100, 200, 100, 200],
		      tag: "<%= request.host %>",
		      timestamp: Date.now(),
		      actions
		  });
	      });
	  }
      });
 
      navigator.serviceWorker.addEventListener('message', event => {
	  console.log(event.data)
      })
  }
  <% end %>
</script>
    
</head>
<body>
<form method='POST' action='<%= request.path %>'>
<%= yield %>
</form>
</body>
</html>
