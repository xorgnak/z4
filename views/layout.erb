<!DOCTYPE html>
<html>
<head>
<script
  src="https://code.jquery.com/jquery-3.7.0.min.js"
  integrity="sha256-2Pmvv0kuTBOenSvLm6bvfBSSHrUJ+3A7x6P5Ebd07/g="
  crossorigin="anonymous"></script>

<link href="https://fonts.googleapis.com/icon?family=Material+Icons"
      rel="stylesheet">

<script src="https://cdnjs.cloudflare.com/ajax/libs/paho-mqtt/1.1.0/paho-mqtt.min.js"
	integrity="sha512-Y5n0fbohPllOQ21fTwM/h9sQQ/1a1h5KhweGhu2zwD8lAoJnTgVa7NIrFa1bRDIMQHixtyuRV2ubIx+qWbGdDA=="
	crossorigin="anonymous"
	referrerpolicy="no-referrer"></script>

<script src="https://cdn.jsdelivr.net/npm/jquery.qrcode@1.0.3/jquery.qrcode.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jsqr@1.4.0/dist/jsQR.min.js"></script>

<meta name="viewport" content="width=device-width, initial-scale=1" />

<% if params.has_key?(:user) && params.has_key?(:chan) %>
<% @user = Z4.make(params[:user], :user) %>
<% @chan = Z4.make(params[:chan], :chan) %>
<link rel="manifest" href="/manifest.webmanifest?user=<%= params[:user] %>&chan=<%= params[:chan] %>&route=<%= request.path.gsub('/','') %>" />
<% end %>

<style>

.material-icons { vertical-align: middle; }

input { vertical-align: middle; }

select { vertical-align: middle; }

html { font-family: monospace; background-color: black; color: white; font-size: xx-small; }

body { padding: 0; margin: 0; width: 100%; height: 100%; }

#form { padding: 0; margin: 0; width: 100%; height: 100%; }

.out { background-color: black; color: grey; border: thin solid grey; }

.in { background-color: black; color: white; border: thin solid green; }

.post { background-color: black; color: grey; border: thin solid gold; }

.error { background-color: black; color: red; border: thin solid red; }

.msg { background-color: black; color: blue; border: thin solid blue; }

.info { background-color: black; color: green; border: thin solid red; }

.wall { background-color: black; color: gold; border: thin solid grey; }

.menu { text-decoration: none; border: thin outset white; border-radius: 5px; padding: 0 1% 0 1%; color: white; }

.e { width: 100%; text-align: center; }

#items { width: 100%; text-align: left; background-color: black; color: white; font-size: large; border-top: thin solid white; border-bottom: thin solid white; }

a { text-decoration: none; color: white; border: thin outset grey; padding: 1%; }

p { }

#change { font-size: xx-large; }

.h { }

.c { width: 100%; text-align: center; }

.i { width: 100%; text-align: left; font-size: xx-small; margin: 0; color: grey; }

.k { }

.v { padding: 0 2% 0 2%; }

.box { background-color: rgba(0,0,0,0.5); box-shadow: 0 0 5px black; text-shadow: black 0px -3px; }

#discord { text-shadow: 0 0 gold; text-shadow: 0 0 gold; text-shadow: 0 0 gold; border: none; padding: 0; color: orange; }

#container { width: 100%; text-align: center; background-color: black; margin: 10% 0 0 0; }

#qrcode { width: 100%; background-color: white; padding: 5% 0 5% 0; }

.tag { width: 100%; text-align: center; background-color: white; color: black; }

#bg { z-index: -10; position: fixed; width: 100vw; height: 100vh; }

.btn { padding: 25%; margin: 20% 0 20% 0; border-radius: 5000px; font-size: 100%; }

#head { width: 100%; margin: 0; }

#top { margin: 0; font-size: xx-large; }

#name {}

#work {}

#nav { float: right; text-align: right; vertical-align: middle; width: min-content; margin: 0 5% 0 0; z-index: 1; }

#phone { color: green; }

#store { color: gold; }

#social { color: red; }

#tips { color: pink; }

#foot { position: fixed; bottom: 0; width: 100%; text-align: center; }

#job { padding: 1% 2% 1% 2%; }

#union { padding: 1% 2% 1% 2%; }

</style>

<script>

var params = <%= JSON.generate(params) %>;

var state = { user: params.user, chan: params.chan, grid: '????????' };

function setupIds(length) {
    let result = '';
    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    const charactersLength = characters.length;
    let counter = 0;
    while (counter < length) {
	result += characters.charAt(Math.floor(Math.random() * charactersLength));
	counter += 1;
    }
    return result;
}

const id = setupIds(8);

function display() {
    $('#grid').text(state['grid'])
    $('#xp').text(state['xp'])
    $('#gp').text(state['gp'])
    $('#items').html(state['items'])
}

function push() {
    console.log('state', state);
    $.post('/', state, function(data){ state = JSON.parse(data); display(); });
    console.log('state', state);
}

$(document).on('click', '#send', function(ev) {
    ev.preventDefault();
    state['input'] = $('#input').val();
    $('#input').val('');
    state['query'] = $('#query').val();
    $('#query').val('');
    push();
});

$(document).on('change', '#change', function(ev) {
    state['query'] = $(this).val();
    push();
});
  
<% if params.has_key?(:user) && params.has_key?(:chan) %>
    
var watchID;

if (!navigator.geolocation) {
    $('#grid').append('----------');
    $('#qr').attr('disabled', true);
    $('#go').attr('disabled', true);
} else {
    function gps_success(p) {
	state['lat'] = p.coords.latitude;
	state['lon'] = p.coords.longitude;
	$('#qr').attr('disabled', false);
	$('#go').attr('disabled', false);
	push();
    }
    function gps_error() {
	state['grid'] = 'XXXXXXXXXX';
	$('#qr').attr('disabled', true);
        $('#go').attr('disabled', true);
    }
    const gps_options = { enableHighAccuracy: true, maximumAge: 15000, timeout: 30000 };
    watchID = navigator.geolocation.watchPosition(gps_success, gps_error, gps_options);
}

if ('serviceWorker' in navigator) {
    navigator.serviceWorker.register('service-worker.js?user=<%= params[:user] %>&chan=<%= params[:chan] %>');
    Notification.requestPermission().then((result) => {
	if (result === "granted") {
	    actions = []
	    navigator.serviceWorker.ready.then((registration) => {
		registration.showNotification("<%= request.host %> running.", {
		    body: "Click to see what's out there.",
		    icon: "../images/touch/chrome-touch-icon-192x192.png",
		    vibrate: [200, 100, 200, 100, 200, 100, 200],
		    tag: "<%= request.host %>",
		    timestamp: Date.now(),
		    actions
		});
	    });
	}
    });
    
    navigator.serviceWorker.addEventListener('message', event => {
	console.log(event.data)
    })
}
  <% end %>
</script>
    
</head>
<body>
<form method='POST' action='<%= request.path %>'>
<%= yield %>
</form>
</body>
</html>
