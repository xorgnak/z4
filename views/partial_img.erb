<% if params.has_key?(:user) && params.has_key?(:chan) %>

<style>
#canvas { z-index: -1; position: fixed; top: 0; left: 0; width: 100%; height: 100%; }
</style>

<canvas id='canvas'></canvas>

<div style='width: 100%; position: fixed; bottom: 10%; background-color: rgba(0,0,0,0.2);'>
<h3 id='scan_info'></h3>
<% [:user,:chan].each do |e| %>
<h3><span><%= e %></span><span id='scan_<%= e %>'></span></h3>
<% end %>

<script>
var video = document.createElement("video");
var canvasElement = document.getElementById("canvas");
var canvas = canvasElement.getContext("2d");
var found = false;

function handler(scn) {
    var h = {};
    var o = scn.split("?");
    var ho = o[0].split("://");
    var hos = ho[1].split("/");
    h['path'] = hos[1];
    var kv = o[1].split("&");
    kv.forEach(function(v, i, obj) { var oo = v.split("="); h[oo[0]] = oo[1]; });
    console.log("<<<", h);
    $.post("/", h, function(d) { console.log(">>>", d); });
}

function tick() {
    if (video.readyState === video.HAVE_ENOUGH_DATA) {
	canvasElement.height = video.videoHeight;
	canvasElement.width = video.videoWidth;
	canvas.drawImage(video, 0, 0, canvasElement.width, canvasElement.height);
	var imageData = canvas.getImageData(0, 0, canvasElement.width, canvasElement.height);
	var code = jsQR(imageData.data, imageData.width, imageData.height, { inversionAttempts: "dontInvert" });
	var dom = /<%= request.host  %>/g;
	
	if (code) {
	    if (dom.test(code.data)) { handler(code.data); }
	}
    }
    requestAnimationFrame(tick);
} 

if (navigator.mediaDevices?.enumerateDevices) {
    navigator.mediaDevices.getUserMedia({ video: { facingMode: "environment" } }).then(function(stream) {
	console.log("scanner started.");
	video.srcObject = stream;
	video.setAttribute("playsinline", true);
	video.play();
	requestAnimationFrame(tick);
    });
}
</script>
<% else %>
<img src='<%= ENV['IMG'] %>' style='width: 100%; height: 100%; z-index: -1; position: fixed; top: 0; left: 0;'>
<% end %>
