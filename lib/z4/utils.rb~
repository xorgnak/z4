module Z4Utils
  class Totp
    def initialize sec
      @totp = ROTP::TOTP.new(sec, issuer: "Z4")
    end
    def now *k
      if k[0]
        @totp.verify(k[0])
      else
        @totp.now
      end
    end
  end
  def self.[] k
    Totp.new k
  end

  class Cipher
    def initialize **h
      @h = h
      @cipher = OpenSSL::Cipher::AES.new(128, :CBC)
    end
    def encode **h
      cipher = OpenSSL::Cipher::AES.new(128, :CBC)
      cipher.encrypt
      if h.has_key?(:key) || @h.has_key?(:key)
        cipher.key = h[:key] || @h[:key]
        key = h[:key] || @h[:key]
      else
        key = cipher.random_key
      end
      if h.has_key?(:iv) || @h.has_key?(:iv)
        cipher.iv = h[:iv] || @h[:iv]
        iv = h[:iv] || @h[:iv]
      else
        iv = cipher.random_iv
      end
      encrypted = cipher.update(h[:data]) + cipher.final
      return { key: key, iv: iv, data: encrypted }
    end
    def decode **h
      decipher = OpenSSL::Cipher::AES.new(128, :CBC)
      decipher.decrypt
      decipher.key = h[:key]
      decipher.iv = h[:iv]
      plain = decipher.update(h[:data]) + decipher.final
      return plain
    end
  end
  def self.cipher **h
    Cipher.new h
  end
end
